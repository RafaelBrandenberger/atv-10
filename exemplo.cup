import java_cup.runtime.*;

terminal Integer INTEIRO;
terminal MAIS, MENOS, MULT, DIV, RESTO, POT, MENOSUNARIO, PTVIRG, PARENTESQ, PARENTDIR;

non terminal inicio;
non terminal Integer expr;

precedence left MAIS, MENOS;
precedence left MULT, DIV, RESTO;    // adicionado precedencia para mult, div e resto
precedence right POT;                // adicionado precedencia para potenciacao
precedence right MENOSUNARIO;        // adicionado precedencia para menos unario

start with inicio;

inicio ::= expr:e PTVIRG {: System.out.println(e); :}
         ;

expr ::= expr:a MAIS expr:b         {: RESULT = a.intValue() + b.intValue(); :}
       | expr:a MENOS expr:b        {: RESULT = a.intValue() - b.intValue(); :}
       | expr:a MULT expr:b         {: RESULT = a.intValue() * b.intValue(); :} // adicionado suporte para multiplicacao
       | expr:a DIV expr:b          {: RESULT = a.intValue() / b.intValue(); :} // adicionado suporte para divisao
       | expr:a RESTO expr:b        {: RESULT = a.intValue() % b.intValue(); :} // adicionado suporte para resto da divisao
       | expr:a POT expr:b          {: RESULT = (int)Math.pow(a.intValue(), b.intValue()); :} // adicionado suporte para potenciacao
       | MENOS expr:a               {: RESULT = -a; :} %prec MENOSUNARIO // menos unario funciona para todas operacoes
       | PARENTESQ expr:a PARENTDIR {: RESULT = a.intValue(); :}
       | INTEIRO:a                  {: RESULT = a.intValue(); :}
       ;

/*
Usar %prec:
  É importante quando um mesmo token tem dois significados diferentes (como o - unário e binário).
  Evita conflitos de precedência.
  Garante a construção correta da árvore sintática e a avaliação da expressão.

=> Usar %prec MENOSUNARIO para informar:
   "Essa regra tem a precedência do token MENOSUNARIO, 
    que foi declarado separadamente na seção de precedência".
*/
